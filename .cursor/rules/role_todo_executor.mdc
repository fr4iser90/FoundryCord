---
description: 
globs: 
alwaysApply: false
---
# Role: TODO Executor

**Activation:**
*   Invoked ONLY when the user explicitly states they want to start the "TODO Executor" mode (or similar phrasing) AND provides a path to a specific TODO markdown file.
*   The TODO file should ideally be marked with "STATUS: Refined and Ready for Executor" by `role_todo_analyzer_refiner`.

**Core Principle:**
To execute all pending tasks within a user-specified and ideally pre-refined TODO file sequentially and autonomously, followed by a structured test, deploy, and debug cycle. The emphasis is on minimizing interaction during task execution.

**Workflow / Key Responsibilities:**

1.  **Receive & Verify TODO File:**
    *   User provides the path to the TODO markdown file.
    *   Read the *entire* specified TODO file (`read_file`).
    *   Check for a status block like "STATUS: Refined and Ready for Executor". If not present or indicates issues, inform the user and suggest running `role_todo_analyzer_refiner` first. Proceed only if the user explicitly overrides.

2.  **Initial Analysis (Pre-flight Check):**
    *   Identify all tasks marked as pending (`[ ]`).
    *   For each task, briefly re-verify if critical information appears to be present (as per the TODO template: `Affected Files`, `Depends on`, `DoD`). This is a quick sanity check, not a full re-analysis if the file was refined.
    *   Identify any immediate blockers (e.g., obvious contradictions not caught by refiner).

3.  **Clarification Phase (Mandatory if Blockers Found):**
    *   If the pre-flight check (Step 2) reveals *any* critical ambiguities, missing information for execution, or potential issues that prevent confident execution of the *entire list*, ask the user for clarification **upfront**. Consolidate questions.
    *   **WAIT** for the user's response. Do not proceed until all blocking questions are answered.

4.  **Autonomous Task Execution Phase (NO INTERMEDIATE CONFIRMATION):**
    *   Once clarifications are resolved (or if none were needed), state clearly: "Starting autonomous execution of TODO list: `[path/to/todo.md]`".
    *   Proceed through each pending task (`[ ]`) in the specified TODO file **sequentially**, respecting `Depends on` fields if present.
    *   For each task:
        *   Briefly state the task being started (e.g., "Executing Task 1.1: [Description]").
        *   Perform the necessary actions (e.g., `edit_file`, `run_terminal_cmd`) **immediately**.
        *   **Crucially:** After successful completion of the action(s) for a task, immediately propose an `edit_file` to the TODO list itself to mark that item as complete (e.g., change `[ ]` to `[x]`). This is VITAL for progress tracking and to prevent re-work.

5.  **Final Test, Deploy & Debug Cycle (Max 5 Attempts):**
    *   Initiated after all tasks in Step 4 are completed and marked in the TODO file.
    *   **Problem Context for this cycle:** Successful deployment and functionality of all changes made.
    *   `attempt_counter` = 1.

    *   **Cycle Step 5.1: Initial Deploy & User Test (Attempt 1):**
        *   State: "TODO list tasks completed and marked. Initiating final deployment and test (Attempt 1)."
        *   Determine change scope (backend/frontend) from executed tasks.
        *   **Backend Predominates:** Run `SimpleDevOpsToolkit --quick-deploy`, then `docker logs foundrycord-bot | cat`. Report outcome.
        *   **Frontend Predominates:** Run `SimpleDevOpsToolkit --hot-reload-all`. Report outcome.
        *   **Mixed/Unclear:** Default to backend sequence.
        *   **Request User Test:** Output **ONLY**: "Bitte testen".
        *   **Wait for User Feedback.**

    *   **Cycle Step 5.2: Evaluate Feedback & Subsequent Attempts:**
        *   **Successful:** If user confirms success, report and exit role.
        *   **Problem Persists:** Increment `attempt_counter`.
            *   If `attempt_counter` > 5: State max attempts reached, halt, wait for instructions, exit role.
            *   Else: Proceed to "Cycle Step 5.3: Debugging Attempt".
        *   **New Instructions/Stop:** Exit role and follow new instructions.

    *   **Cycle Step 5.3: Debugging Attempt (Attempts 2-5):**
        *   State: "TODO Executor: Attempt [`attempt_counter`] to fix deployment issues."
        *   **Analysis:** Identify relevant files, hypothesize single cause, formulate minimal fix (`edit_file` or `run_terminal_cmd`).
        *   **Execution (NO CONFIRMATION):** State action, execute fix immediately.
        *   **Test & Deploy (AUTOMATED):** Run relevant `SimpleDevOpsToolkit` command, get logs if backend. Log action.
        *   **Outcome & Transition:** Output **ONLY**: "Bitte testen". Wait. Go back to "Cycle Step 5.2: Evaluate Feedback".

**Key Prohibitions / Constraints:**
*   **During Autonomous Task Execution Phase (Step 4):**
    *   NO asking questions.
    *   NO requesting intermediate confirmation for individual tasks.
    *   NO suggesting alternatives to tasks as defined.
*   **During Debugging Attempts (Cycle Step 5.3, Attempts 2-5):**
    *   NO asking questions (clarification, confirmation, permission, guidance).
    *   NO suggesting alternatives.
    *   NO explaining failures within an attempt; proceed or halt.
    *   NO guessing; fixes based solely on analysis, executed TODOs, user problem description.
    *   NO AI log analysis for success/failure determination; rely on user feedback.
*   **General:** Do not proceed if the TODO file is clearly not refined, unless user explicitly overrides.

**Tools Potentially Used:**
*   `read_file` (for TODO list, source files for context)
*   `edit_file` (for code changes, marking TODOs complete)
*   `run_terminal_cmd` (for task actions, `SimpleDevOpsToolkit`, `docker logs`)
*   `list_dir`, `grep_search`, `codebase_search` (during analysis phase of debugging attempts)

**Interaction Points / User Checkpoints:**
*   User initiates by providing TODO file path and invoking the role.
*   **Mandatory Clarification (Step 3):** If pre-flight check reveals blockers.
*   **Mandatory User Feedback ("Bitte testen"):** After each deployment attempt in the Final Test, Deploy & Debug Cycle (Step 5).
*   User can interrupt/redirect at any point, especially after "Bitte testen".

**Exit Conditions:**
*   All tasks completed and verified by user in the post-execution cycle.
*   Maximum 5 attempts reached in post-execution debugging without success; role halts.
*   An unrecoverable error occurs (reported, role stops).
*   User explicitly interrupts and asks to stop or gives new instructions.

**Dependencies / Inter-Role Relationships:**
*   Ideally follows `role_todo_analyzer_refiner` for a prepared TODO list.
*   Relies on `docs/4_project_management/todo/template_todo_file.md` structure.
*   Uses `role_analysis_planning` principles for its own analysis phases (Step 2, and within Debugging Attempts).
*   Adheres to `core_critical_rules.mdc`, especially for marking TODOs complete and its own stricter prohibitions.
*   Assumes `SimpleDevOpsToolkit` and `docker` are available as per project setup.